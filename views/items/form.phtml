<?php
// Assure la compatibilité si $item est null (pour la création)
$isEditing = $item !== null;
$itemName = htmlspecialchars($item['name'] ?? '');
$itemDescription = htmlspecialchars($item['description'] ?? '');

// Récupère les ingrédients existants (doivent être un tableau après le décodage du modèle)
$existingIngredients = $item['ingredients'] ?? [];

// $action est toujours défini par le contrôleur (store ou update/{id})
?>

<!-- Le titre est maintenant un H2 plus petit, car la modale a déjà son propre conteneur -->
<h2 class="text-2xl font-semibold mb-4 text-gray-800"><?= $isEditing ? 'Modifier l\'Item' : 'Créer un Nouvel Item' ?></h2>

<form action="<?= $action ?>" method="POST" id="itemForm">
    <!-- Champ pour le nom -->
    <div class="mb-4">
        <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Nom</label>
        <input 
            type="text" 
            name="name" 
            id="name" 
            value="<?= $itemName ?>" 
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
            required
        >
    </div>
    <!-- Champ pour la description -->
    <div class="mb-6">
        <label for="description" class="block text-gray-700 text-sm font-bold mb-2">Description</label>
        <textarea 
            name="description" 
            id="description" 
            rows="4" 
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        ><?= $itemDescription ?></textarea>
    </div>

    <!-- NOUVEAU: Champ pour les Ingrédients -->
    <div class="mb-6">
        <label class="block text-gray-700 text-sm font-bold mb-2">Ingrédients</label>
        <div class="flex space-x-2 mb-2">
            <input 
                type="text" 
                id="ingredientInput" 
                placeholder="Ex: 1kg de farine, 3 œufs..."
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
            >
            <button 
                type="button" 
                id="addIngredientBtn" 
                class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition duration-150"
            >
                Ajouter
            </button>
        </div>
        
        <!-- Liste où les ingrédients seront affichés -->
        <ul id="ingredientsList" class="border rounded p-2 bg-gray-50 list-none">
            <!-- Les <li> seront insérés ici par JS -->
        </ul>
        
        <!-- Champ caché où la chaîne JSON finale sera stockée pour l'envoi au serveur -->
        <input type="hidden" name="ingredients" id="ingredientsHidden" value='<?= htmlspecialchars(json_encode($existingIngredients), ENT_QUOTES, 'UTF-8') ?>'>
    </div>
    
    <div class="flex items-center justify-end space-x-4">
        <!-- Remplacement du lien 'Annuler' par un bouton qui exécute la fonction de fermeture JS -->
        <button 
            type="button" 
            onclick="document.getElementById('close-modal').click()"
            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
            Annuler
        </button>
        <button 
            type="submit" 
            class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition duration-150"
        >
            Enregistrer
        </button>
    </div>
</form>

<script>
    setTimeout(() => {
        document.addEventListener('DOMContentLoaded', function() {
        // Références DOM
        const form = document.getElementById('itemForm');
        const input = document.getElementById('ingredientInput');
        const list = document.getElementById('ingredientsList');
        const hiddenInput = document.getElementById('ingredientsHidden');
        const addButton = document.getElementById('addIngredientBtn');
        
        let ingredientsArray = JSON.parse(hiddenInput.value || '[]');

        // Fonction de rendu d'un élément de la liste
        function renderIngredient(ingredient) {
            const li = document.createElement('li');
            li.className = 'flex justify-between items-center p-1.5 border-b last:border-b-0 text-sm text-gray-700';
            li.textContent = ingredient;
            
            const removeBtn = document.createElement('button');
            removeBtn.innerHTML = '&times;'; // Symbole de multiplication (X)
            removeBtn.className = 'text-red-500 hover:text-red-700 font-bold ml-2 transition duration-150';
            removeBtn.type = 'button'; // Important pour ne pas soumettre le formulaire
            
            // Logique de suppression
            removeBtn.onclick = function() {
                const index = ingredientsArray.indexOf(ingredient);
                if (index > -1) {
                    ingredientsArray.splice(index, 1);
                    updateList();
                }
            };
            
            li.appendChild(removeBtn);
            list.appendChild(li);
        }

        // Fonction pour mettre à jour l'affichage et le champ caché
        function updateList() {
            list.innerHTML = ''; // Nettoyer la liste affichée
            ingredientsArray.forEach(renderIngredient);
            // Mettre à jour le champ caché avec le JSON
            hiddenInput.value = JSON.stringify(ingredientsArray);
        }

        // Gestion de l'ajout d'ingrédient
        function addIngredient() {
            const value = input.value.trim();
            if (value && !ingredientsArray.includes(value)) {
                ingredientsArray.push(value);
                input.value = ''; // Réinitialiser le champ
                updateList();
                input.focus();
            }
        }

        // Attachement des événements
        addButton.addEventListener('click', addIngredient);
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault(); // Empêcher la soumission du formulaire
                addIngredient();
            }
        });

        // Charger les ingrédients existants au démarrage (pour l'édition)
        updateList();
    });
        
    }, 0);
    
</script>
